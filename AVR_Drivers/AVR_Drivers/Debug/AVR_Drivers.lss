
AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000083e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  0000083e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000083e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090b  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006da  00000000  00000000  00001267  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f7  00000000  00000000  00001941  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d2  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f5  00000000  00000000  000026ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000029af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 80 02 	call	0x500	; 0x500 <main>
  74:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_WritePin>:
	}
	else
	{
		
	}
}
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_WritePin+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	6a 83       	std	Y+2, r22	; 0x02
  8a:	8a 81       	ldd	r24, Y+2	; 0x02
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	09 f0       	breq	.+2      	; 0x92 <DIO_WritePin+0x16>
  90:	74 c0       	rjmp	.+232    	; 0x17a <DIO_WritePin+0xfe>
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	88 30       	cpi	r24, 0x08	; 8
  96:	a8 f4       	brcc	.+42     	; 0xc2 <DIO_WritePin+0x46>
  98:	8b e3       	ldi	r24, 0x3B	; 59
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	2b e3       	ldi	r18, 0x3B	; 59
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	f9 01       	movw	r30, r18
  a2:	20 81       	ld	r18, Z
  a4:	62 2f       	mov	r22, r18
  a6:	29 81       	ldd	r18, Y+1	; 0x01
  a8:	42 2f       	mov	r20, r18
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_WritePin+0x3a>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	4a 95       	dec	r20
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_WritePin+0x36>
  ba:	26 2b       	or	r18, r22
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
  c0:	d6 c0       	rjmp	.+428    	; 0x26e <DIO_WritePin+0x1f2>
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	88 30       	cpi	r24, 0x08	; 8
  c6:	d8 f0       	brcs	.+54     	; 0xfe <DIO_WritePin+0x82>
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	80 31       	cpi	r24, 0x10	; 16
  cc:	c0 f4       	brcc	.+48     	; 0xfe <DIO_WritePin+0x82>
  ce:	88 e3       	ldi	r24, 0x38	; 56
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	28 e3       	ldi	r18, 0x38	; 56
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	20 81       	ld	r18, Z
  da:	62 2f       	mov	r22, r18
  dc:	29 81       	ldd	r18, Y+1	; 0x01
  de:	22 2f       	mov	r18, r18
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	a9 01       	movw	r20, r18
  e4:	48 50       	subi	r20, 0x08	; 8
  e6:	51 09       	sbc	r21, r1
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_WritePin+0x76>
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	4a 95       	dec	r20
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_WritePin+0x72>
  f6:	26 2b       	or	r18, r22
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
  fc:	b8 c0       	rjmp	.+368    	; 0x26e <DIO_WritePin+0x1f2>
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	80 31       	cpi	r24, 0x10	; 16
 102:	d8 f0       	brcs	.+54     	; 0x13a <DIO_WritePin+0xbe>
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	88 31       	cpi	r24, 0x18	; 24
 108:	c0 f4       	brcc	.+48     	; 0x13a <DIO_WritePin+0xbe>
 10a:	85 e3       	ldi	r24, 0x35	; 53
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	25 e3       	ldi	r18, 0x35	; 53
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	f9 01       	movw	r30, r18
 114:	20 81       	ld	r18, Z
 116:	62 2f       	mov	r22, r18
 118:	29 81       	ldd	r18, Y+1	; 0x01
 11a:	22 2f       	mov	r18, r18
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	a9 01       	movw	r20, r18
 120:	40 51       	subi	r20, 0x10	; 16
 122:	51 09       	sbc	r21, r1
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_WritePin+0xb2>
 12a:	22 0f       	add	r18, r18
 12c:	33 1f       	adc	r19, r19
 12e:	4a 95       	dec	r20
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_WritePin+0xae>
 132:	26 2b       	or	r18, r22
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
 138:	9a c0       	rjmp	.+308    	; 0x26e <DIO_WritePin+0x1f2>
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	88 31       	cpi	r24, 0x18	; 24
 13e:	08 f4       	brcc	.+2      	; 0x142 <DIO_WritePin+0xc6>
 140:	96 c0       	rjmp	.+300    	; 0x26e <DIO_WritePin+0x1f2>
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	81 32       	cpi	r24, 0x21	; 33
 146:	08 f0       	brcs	.+2      	; 0x14a <DIO_WritePin+0xce>
 148:	92 c0       	rjmp	.+292    	; 0x26e <DIO_WritePin+0x1f2>
 14a:	82 e3       	ldi	r24, 0x32	; 50
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	22 e3       	ldi	r18, 0x32	; 50
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	f9 01       	movw	r30, r18
 154:	20 81       	ld	r18, Z
 156:	62 2f       	mov	r22, r18
 158:	29 81       	ldd	r18, Y+1	; 0x01
 15a:	22 2f       	mov	r18, r18
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	a9 01       	movw	r20, r18
 160:	48 51       	subi	r20, 0x18	; 24
 162:	51 09       	sbc	r21, r1
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_WritePin+0xf2>
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	4a 95       	dec	r20
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_WritePin+0xee>
 172:	26 2b       	or	r18, r22
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
 178:	7a c0       	rjmp	.+244    	; 0x26e <DIO_WritePin+0x1f2>
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	88 23       	and	r24, r24
 17e:	09 f0       	breq	.+2      	; 0x182 <DIO_WritePin+0x106>
 180:	76 c0       	rjmp	.+236    	; 0x26e <DIO_WritePin+0x1f2>
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	88 30       	cpi	r24, 0x08	; 8
 186:	b0 f4       	brcc	.+44     	; 0x1b4 <DIO_WritePin+0x138>
 188:	8b e3       	ldi	r24, 0x3B	; 59
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	2b e3       	ldi	r18, 0x3B	; 59
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	62 2f       	mov	r22, r18
 196:	29 81       	ldd	r18, Y+1	; 0x01
 198:	42 2f       	mov	r20, r18
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_WritePin+0x12a>
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	4a 95       	dec	r20
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_WritePin+0x126>
 1aa:	20 95       	com	r18
 1ac:	26 23       	and	r18, r22
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
 1b2:	5d c0       	rjmp	.+186    	; 0x26e <DIO_WritePin+0x1f2>
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	88 30       	cpi	r24, 0x08	; 8
 1b8:	e0 f0       	brcs	.+56     	; 0x1f2 <DIO_WritePin+0x176>
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	80 31       	cpi	r24, 0x10	; 16
 1be:	c8 f4       	brcc	.+50     	; 0x1f2 <DIO_WritePin+0x176>
 1c0:	88 e3       	ldi	r24, 0x38	; 56
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	28 e3       	ldi	r18, 0x38	; 56
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	f9 01       	movw	r30, r18
 1ca:	20 81       	ld	r18, Z
 1cc:	62 2f       	mov	r22, r18
 1ce:	29 81       	ldd	r18, Y+1	; 0x01
 1d0:	22 2f       	mov	r18, r18
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	a9 01       	movw	r20, r18
 1d6:	48 50       	subi	r20, 0x08	; 8
 1d8:	51 09       	sbc	r21, r1
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_WritePin+0x168>
 1e0:	22 0f       	add	r18, r18
 1e2:	33 1f       	adc	r19, r19
 1e4:	4a 95       	dec	r20
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_WritePin+0x164>
 1e8:	20 95       	com	r18
 1ea:	26 23       	and	r18, r22
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
 1f0:	3e c0       	rjmp	.+124    	; 0x26e <DIO_WritePin+0x1f2>
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	80 31       	cpi	r24, 0x10	; 16
 1f6:	e0 f0       	brcs	.+56     	; 0x230 <DIO_WritePin+0x1b4>
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	88 31       	cpi	r24, 0x18	; 24
 1fc:	c8 f4       	brcc	.+50     	; 0x230 <DIO_WritePin+0x1b4>
 1fe:	85 e3       	ldi	r24, 0x35	; 53
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	25 e3       	ldi	r18, 0x35	; 53
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	f9 01       	movw	r30, r18
 208:	20 81       	ld	r18, Z
 20a:	62 2f       	mov	r22, r18
 20c:	29 81       	ldd	r18, Y+1	; 0x01
 20e:	22 2f       	mov	r18, r18
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	a9 01       	movw	r20, r18
 214:	40 51       	subi	r20, 0x10	; 16
 216:	51 09       	sbc	r21, r1
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_WritePin+0x1a6>
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	4a 95       	dec	r20
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_WritePin+0x1a2>
 226:	20 95       	com	r18
 228:	26 23       	and	r18, r22
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18
 22e:	1f c0       	rjmp	.+62     	; 0x26e <DIO_WritePin+0x1f2>
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	88 31       	cpi	r24, 0x18	; 24
 234:	e0 f0       	brcs	.+56     	; 0x26e <DIO_WritePin+0x1f2>
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	81 32       	cpi	r24, 0x21	; 33
 23a:	c8 f4       	brcc	.+50     	; 0x26e <DIO_WritePin+0x1f2>
 23c:	82 e3       	ldi	r24, 0x32	; 50
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	22 e3       	ldi	r18, 0x32	; 50
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	f9 01       	movw	r30, r18
 246:	20 81       	ld	r18, Z
 248:	62 2f       	mov	r22, r18
 24a:	29 81       	ldd	r18, Y+1	; 0x01
 24c:	22 2f       	mov	r18, r18
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	a9 01       	movw	r20, r18
 252:	48 51       	subi	r20, 0x18	; 24
 254:	51 09       	sbc	r21, r1
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_WritePin+0x1e4>
 25c:	22 0f       	add	r18, r18
 25e:	33 1f       	adc	r19, r19
 260:	4a 95       	dec	r20
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_WritePin+0x1e0>
 264:	20 95       	com	r18
 266:	26 23       	and	r18, r22
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
 26c:	00 c0       	rjmp	.+0      	; 0x26e <DIO_WritePin+0x1f2>
 26e:	00 00       	nop
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <DIO_SetPinDirection>:
/* @Param: Pin_Num, Pin_Direction                                       */
/* return: void                                                         */
/* FUNCTION Description: Set PINs Direction                             */
/************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	00 d0       	rcall	.+0      	; 0x280 <DIO_SetPinDirection+0x6>
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection == OUTPUT)
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	09 f0       	breq	.+2      	; 0x290 <DIO_SetPinDirection+0x16>
 28e:	74 c0       	rjmp	.+232    	; 0x378 <DIO_SetPinDirection+0xfe>
	{
		if((PinNum >= PIN0) && (PinNum <= PIN7) )
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	88 30       	cpi	r24, 0x08	; 8
 294:	a8 f4       	brcc	.+42     	; 0x2c0 <DIO_SetPinDirection+0x46>
		{
			Set_Bit(DDRA,PinNum);
 296:	8a e3       	ldi	r24, 0x3A	; 58
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	2a e3       	ldi	r18, 0x3A	; 58
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	f9 01       	movw	r30, r18
 2a0:	20 81       	ld	r18, Z
 2a2:	62 2f       	mov	r22, r18
 2a4:	29 81       	ldd	r18, Y+1	; 0x01
 2a6:	42 2f       	mov	r20, r18
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_SetPinDirection+0x3a>
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	4a 95       	dec	r20
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_SetPinDirection+0x36>
 2b8:	26 2b       	or	r18, r22
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
	else
	{
		
	}
	
}
 2be:	d6 c0       	rjmp	.+428    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	{
		if((PinNum >= PIN0) && (PinNum <= PIN7) )
		{
			Set_Bit(DDRA,PinNum);
		}
		else if((PinNum >= PIN8) && (PinNum <= PIN15) )
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	88 30       	cpi	r24, 0x08	; 8
 2c4:	d8 f0       	brcs	.+54     	; 0x2fc <DIO_SetPinDirection+0x82>
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	80 31       	cpi	r24, 0x10	; 16
 2ca:	c0 f4       	brcc	.+48     	; 0x2fc <DIO_SetPinDirection+0x82>
		{
			Set_Bit(DDRB,(PinNum-PIN8));
 2cc:	87 e3       	ldi	r24, 0x37	; 55
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	27 e3       	ldi	r18, 0x37	; 55
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	f9 01       	movw	r30, r18
 2d6:	20 81       	ld	r18, Z
 2d8:	62 2f       	mov	r22, r18
 2da:	29 81       	ldd	r18, Y+1	; 0x01
 2dc:	22 2f       	mov	r18, r18
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	a9 01       	movw	r20, r18
 2e2:	48 50       	subi	r20, 0x08	; 8
 2e4:	51 09       	sbc	r21, r1
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_SetPinDirection+0x76>
 2ec:	22 0f       	add	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	4a 95       	dec	r20
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_SetPinDirection+0x72>
 2f4:	26 2b       	or	r18, r22
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
 2fa:	b8 c0       	rjmp	.+368    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		}
		else if((PinNum >= PIN16) && (PinNum <= PIN23) )
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	80 31       	cpi	r24, 0x10	; 16
 300:	d8 f0       	brcs	.+54     	; 0x338 <DIO_SetPinDirection+0xbe>
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	88 31       	cpi	r24, 0x18	; 24
 306:	c0 f4       	brcc	.+48     	; 0x338 <DIO_SetPinDirection+0xbe>
		{
			Set_Bit(DDRC,(PinNum-PIN16));
 308:	84 e3       	ldi	r24, 0x34	; 52
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	24 e3       	ldi	r18, 0x34	; 52
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	f9 01       	movw	r30, r18
 312:	20 81       	ld	r18, Z
 314:	62 2f       	mov	r22, r18
 316:	29 81       	ldd	r18, Y+1	; 0x01
 318:	22 2f       	mov	r18, r18
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	a9 01       	movw	r20, r18
 31e:	40 51       	subi	r20, 0x10	; 16
 320:	51 09       	sbc	r21, r1
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_SetPinDirection+0xb2>
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	4a 95       	dec	r20
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_SetPinDirection+0xae>
 330:	26 2b       	or	r18, r22
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
 336:	9a c0       	rjmp	.+308    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		}
		else if((PinNum >= PIN24) && (PinNum <= PIN32) )
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	88 31       	cpi	r24, 0x18	; 24
 33c:	08 f4       	brcc	.+2      	; 0x340 <DIO_SetPinDirection+0xc6>
 33e:	96 c0       	rjmp	.+300    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 340:	89 81       	ldd	r24, Y+1	; 0x01
 342:	81 32       	cpi	r24, 0x21	; 33
 344:	08 f0       	brcs	.+2      	; 0x348 <DIO_SetPinDirection+0xce>
 346:	92 c0       	rjmp	.+292    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		{
			Set_Bit(DDRD,(PinNum-PIN24));
 348:	81 e3       	ldi	r24, 0x31	; 49
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	21 e3       	ldi	r18, 0x31	; 49
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	f9 01       	movw	r30, r18
 352:	20 81       	ld	r18, Z
 354:	62 2f       	mov	r22, r18
 356:	29 81       	ldd	r18, Y+1	; 0x01
 358:	22 2f       	mov	r18, r18
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	a9 01       	movw	r20, r18
 35e:	48 51       	subi	r20, 0x18	; 24
 360:	51 09       	sbc	r21, r1
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_SetPinDirection+0xf2>
 368:	22 0f       	add	r18, r18
 36a:	33 1f       	adc	r19, r19
 36c:	4a 95       	dec	r20
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_SetPinDirection+0xee>
 370:	26 2b       	or	r18, r22
 372:	fc 01       	movw	r30, r24
 374:	20 83       	st	Z, r18
	else
	{
		
	}
	
}
 376:	7a c0       	rjmp	.+244    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		{
			
		}
	}
	
	else if(PinDirection == INPUT)
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	88 23       	and	r24, r24
 37c:	09 f0       	breq	.+2      	; 0x380 <DIO_SetPinDirection+0x106>
 37e:	76 c0       	rjmp	.+236    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	{
		if((PinNum >= PIN0) && (PinNum <= PIN7) )
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	88 30       	cpi	r24, 0x08	; 8
 384:	b0 f4       	brcc	.+44     	; 0x3b2 <DIO_SetPinDirection+0x138>
		{
			Clear_Bit(DDRA,PinNum);
 386:	8a e3       	ldi	r24, 0x3A	; 58
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	2a e3       	ldi	r18, 0x3A	; 58
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	f9 01       	movw	r30, r18
 390:	20 81       	ld	r18, Z
 392:	62 2f       	mov	r22, r18
 394:	29 81       	ldd	r18, Y+1	; 0x01
 396:	42 2f       	mov	r20, r18
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_SetPinDirection+0x12a>
 3a0:	22 0f       	add	r18, r18
 3a2:	33 1f       	adc	r19, r19
 3a4:	4a 95       	dec	r20
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_SetPinDirection+0x126>
 3a8:	20 95       	com	r18
 3aa:	26 23       	and	r18, r22
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18
	else
	{
		
	}
	
}
 3b0:	5d c0       	rjmp	.+186    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	{
		if((PinNum >= PIN0) && (PinNum <= PIN7) )
		{
			Clear_Bit(DDRA,PinNum);
		}
		else if((PinNum >= PIN8) && (PinNum <= PIN15) )
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	88 30       	cpi	r24, 0x08	; 8
 3b6:	e0 f0       	brcs	.+56     	; 0x3f0 <DIO_SetPinDirection+0x176>
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
 3ba:	80 31       	cpi	r24, 0x10	; 16
 3bc:	c8 f4       	brcc	.+50     	; 0x3f0 <DIO_SetPinDirection+0x176>
		{
			Clear_Bit(DDRB,(PinNum-PIN8));
 3be:	87 e3       	ldi	r24, 0x37	; 55
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	27 e3       	ldi	r18, 0x37	; 55
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	f9 01       	movw	r30, r18
 3c8:	20 81       	ld	r18, Z
 3ca:	62 2f       	mov	r22, r18
 3cc:	29 81       	ldd	r18, Y+1	; 0x01
 3ce:	22 2f       	mov	r18, r18
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	a9 01       	movw	r20, r18
 3d4:	48 50       	subi	r20, 0x08	; 8
 3d6:	51 09       	sbc	r21, r1
 3d8:	21 e0       	ldi	r18, 0x01	; 1
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_SetPinDirection+0x168>
 3de:	22 0f       	add	r18, r18
 3e0:	33 1f       	adc	r19, r19
 3e2:	4a 95       	dec	r20
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_SetPinDirection+0x164>
 3e6:	20 95       	com	r18
 3e8:	26 23       	and	r18, r22
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18
 3ee:	3e c0       	rjmp	.+124    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		}
		else if((PinNum >= PIN16) && (PinNum <= PIN23) )
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	80 31       	cpi	r24, 0x10	; 16
 3f4:	e0 f0       	brcs	.+56     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	88 31       	cpi	r24, 0x18	; 24
 3fa:	c8 f4       	brcc	.+50     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		{
			Clear_Bit(DDRC,(PinNum-PIN16));
 3fc:	84 e3       	ldi	r24, 0x34	; 52
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	24 e3       	ldi	r18, 0x34	; 52
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	f9 01       	movw	r30, r18
 406:	20 81       	ld	r18, Z
 408:	62 2f       	mov	r22, r18
 40a:	29 81       	ldd	r18, Y+1	; 0x01
 40c:	22 2f       	mov	r18, r18
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	a9 01       	movw	r20, r18
 412:	40 51       	subi	r20, 0x10	; 16
 414:	51 09       	sbc	r21, r1
 416:	21 e0       	ldi	r18, 0x01	; 1
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41c:	22 0f       	add	r18, r18
 41e:	33 1f       	adc	r19, r19
 420:	4a 95       	dec	r20
 422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 424:	20 95       	com	r18
 426:	26 23       	and	r18, r22
 428:	fc 01       	movw	r30, r24
 42a:	20 83       	st	Z, r18
 42c:	1f c0       	rjmp	.+62     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		}
		else if((PinNum >= PIN24) && (PinNum <= PIN32) )
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	88 31       	cpi	r24, 0x18	; 24
 432:	e0 f0       	brcs	.+56     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	81 32       	cpi	r24, 0x21	; 33
 438:	c8 f4       	brcc	.+50     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		{
			Clear_Bit(DDRD,(PinNum-PIN24));
 43a:	81 e3       	ldi	r24, 0x31	; 49
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	21 e3       	ldi	r18, 0x31	; 49
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	f9 01       	movw	r30, r18
 444:	20 81       	ld	r18, Z
 446:	62 2f       	mov	r22, r18
 448:	29 81       	ldd	r18, Y+1	; 0x01
 44a:	22 2f       	mov	r18, r18
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	a9 01       	movw	r20, r18
 450:	48 51       	subi	r20, 0x18	; 24
 452:	51 09       	sbc	r21, r1
 454:	21 e0       	ldi	r18, 0x01	; 1
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45a:	22 0f       	add	r18, r18
 45c:	33 1f       	adc	r19, r19
 45e:	4a 95       	dec	r20
 460:	e2 f7       	brpl	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 462:	20 95       	com	r18
 464:	26 23       	and	r18, r22
 466:	fc 01       	movw	r30, r24
 468:	20 83       	st	Z, r18
	else
	{
		
	}
	
}
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <EXTI2_INIT>:
/* @Param: void                                                         */
/* return: void                                                         */
/* FUNCTION Description: Initialization of External interrupt no. 2     */
/************************************************************************/
void EXTI2_INIT(void)
{
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG, BIT_7);
 480:	8f e5       	ldi	r24, 0x5F	; 95
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	2f e5       	ldi	r18, 0x5F	; 95
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	f9 01       	movw	r30, r18
 48a:	20 81       	ld	r18, Z
 48c:	20 68       	ori	r18, 0x80	; 128
 48e:	fc 01       	movw	r30, r24
 490:	20 83       	st	Z, r18
	Set_Bit(GICR, BIT_5);
 492:	8b e5       	ldi	r24, 0x5B	; 91
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	2b e5       	ldi	r18, 0x5B	; 91
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	f9 01       	movw	r30, r18
 49c:	20 81       	ld	r18, Z
 49e:	20 62       	ori	r18, 0x20	; 32
 4a0:	fc 01       	movw	r30, r24
 4a2:	20 83       	st	Z, r18
	Set_Bit(GIFR, BIT_5);
 4a4:	8a e5       	ldi	r24, 0x5A	; 90
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	2a e5       	ldi	r18, 0x5A	; 90
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	f9 01       	movw	r30, r18
 4ae:	20 81       	ld	r18, Z
 4b0:	20 62       	ori	r18, 0x20	; 32
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 83       	st	Z, r18
	Set_Bit(MCUCSR, BIT_6);
 4b6:	84 e5       	ldi	r24, 0x54	; 84
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	24 e5       	ldi	r18, 0x54	; 84
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	f9 01       	movw	r30, r18
 4c0:	20 81       	ld	r18, Z
 4c2:	20 64       	ori	r18, 0x40	; 64
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
}
 4c8:	00 00       	nop
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <__vector_3>:

/************************************************************************/
/* External interrupt no. 2                                             */
/************************************************************************/
ISR(INT2_vect)
{
 4d0:	1f 92       	push	r1
 4d2:	0f 92       	push	r0
 4d4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4d8:	0f 92       	push	r0
 4da:	11 24       	eor	r1, r1
 4dc:	8f 93       	push	r24
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
	Flag = NUM_1 ;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 4ec:	00 00       	nop
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	8f 91       	pop	r24
 4f4:	0f 90       	pop	r0
 4f6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <main>:

/* #define F_cpu 16000000
   #include <util/delay.h> */

int main(void)
{
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	1f 92       	push	r1
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	
	DIO_SetPinDirection(PushButt1 ,INPUT);
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	8a e0       	ldi	r24, 0x0A	; 10
 50e:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_SetPinDirection>
	DIO_WritePin(PushButt1 ,HIGH);
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	8a e0       	ldi	r24, 0x0A	; 10
 516:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	
	DIO_SetPinDirection(LED1 ,OUTPUT);
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	8d e0       	ldi	r24, 0x0D	; 13
 51e:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_SetPinDirection>
	DIO_SetPinDirection(LED2 ,OUTPUT);
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	8e e0       	ldi	r24, 0x0E	; 14
 526:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_SetPinDirection>
	DIO_SetPinDirection(LED3 ,OUTPUT);
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	8f e0       	ldi	r24, 0x0F	; 15
 52e:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_SetPinDirection>
	
	Timer0_CTC_Init();
 532:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Timer0_CTC_Init>
	EXTI2_INIT();
 536:	0e 94 3c 02 	call	0x478	; 0x478 <EXTI2_INIT>
	extern uint16 counter;
	extern uint8 Flag;
	
	while (1)
	{
		DIO_WritePin(LED1 ,HIGH);
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	8d e0       	ldi	r24, 0x0D	; 13
 53e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		for (i=NUM_0 ;i<NUM_20 ;i++)
 542:	19 82       	std	Y+1, r1	; 0x01
 544:	31 c0       	rjmp	.+98     	; 0x5a8 <main+0xa8>
		{
			/* timer_delay(50); */ 
			while((counter < NUM_50));
 546:	00 00       	nop
 548:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter>
 54c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <counter+0x1>
 550:	c2 97       	sbiw	r24, 0x32	; 50
 552:	d0 f3       	brcs	.-12     	; 0x548 <main+0x48>
			counter = NUM_0 ;
 554:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter+0x1>
 558:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <counter>
			while(Flag == NUM_1)
 55c:	1e c0       	rjmp	.+60     	; 0x59a <main+0x9a>
			{   
				Flag = NUM_0;
 55e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				DIO_WritePin(LED2 ,LOW);
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	8e e0       	ldi	r24, 0x0E	; 14
 566:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
				DIO_WritePin(LED1 ,LOW);
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	8d e0       	ldi	r24, 0x0D	; 13
 56e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
				DIO_WritePin(LED3 ,HIGH);
 572:	61 e0       	ldi	r22, 0x01	; 1
 574:	8f e0       	ldi	r24, 0x0F	; 15
 576:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
				while((counter < NUM_1000));
 57a:	00 00       	nop
 57c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter>
 580:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <counter+0x1>
 584:	88 3e       	cpi	r24, 0xE8	; 232
 586:	93 40       	sbci	r25, 0x03	; 3
 588:	c8 f3       	brcs	.-14     	; 0x57c <main+0x7c>
				counter = NUM_0;
 58a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter+0x1>
 58e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <counter>
				DIO_WritePin(LED3 ,LOW);
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	8f e0       	ldi	r24, 0x0F	; 15
 596:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		for (i=NUM_0 ;i<NUM_20 ;i++)
		{
			/* timer_delay(50); */ 
			while((counter < NUM_50));
			counter = NUM_0 ;
			while(Flag == NUM_1)
 59a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 59e:	81 30       	cpi	r24, 0x01	; 1
 5a0:	f1 f2       	breq	.-68     	; 0x55e <main+0x5e>
	extern uint8 Flag;
	
	while (1)
	{
		DIO_WritePin(LED1 ,HIGH);
		for (i=NUM_0 ;i<NUM_20 ;i++)
 5a2:	89 81       	ldd	r24, Y+1	; 0x01
 5a4:	8f 5f       	subi	r24, 0xFF	; 255
 5a6:	89 83       	std	Y+1, r24	; 0x01
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	84 31       	cpi	r24, 0x14	; 20
 5ac:	60 f2       	brcs	.-104    	; 0x546 <main+0x46>
				DIO_WritePin(LED3 ,LOW);
				
			}
		}
		
		DIO_WritePin(LED1 ,LOW);
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	8d e0       	ldi	r24, 0x0D	; 13
 5b2:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		DIO_WritePin(LED3 ,HIGH);
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	8f e0       	ldi	r24, 0x0F	; 15
 5ba:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		for (i=NUM_0 ;i<NUM_20 ;i++)
 5be:	19 82       	std	Y+1, r1	; 0x01
 5c0:	31 c0       	rjmp	.+98     	; 0x624 <main+0x124>
		{
			/* timer_delay(50); */ 
			while((counter < NUM_50));
 5c2:	00 00       	nop
 5c4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter>
 5c8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <counter+0x1>
 5cc:	c2 97       	sbiw	r24, 0x32	; 50
 5ce:	d0 f3       	brcs	.-12     	; 0x5c4 <main+0xc4>
			counter = NUM_0 ;
 5d0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter+0x1>
 5d4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <counter>
			while(Flag == NUM_1)
 5d8:	1e c0       	rjmp	.+60     	; 0x616 <main+0x116>
			{
				Flag = NUM_0 ;
 5da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				DIO_WritePin(LED2 ,LOW);
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	8e e0       	ldi	r24, 0x0E	; 14
 5e2:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
				DIO_WritePin(LED1,LOW);
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	8d e0       	ldi	r24, 0x0D	; 13
 5ea:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
				DIO_WritePin(LED3 ,HIGH);
 5ee:	61 e0       	ldi	r22, 0x01	; 1
 5f0:	8f e0       	ldi	r24, 0x0F	; 15
 5f2:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
				/* timer_delay(1000); */
				while((counter < NUM_1000));
 5f6:	00 00       	nop
 5f8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter>
 5fc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <counter+0x1>
 600:	88 3e       	cpi	r24, 0xE8	; 232
 602:	93 40       	sbci	r25, 0x03	; 3
 604:	c8 f3       	brcs	.-14     	; 0x5f8 <main+0xf8>
				counter = NUM_0;
 606:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter+0x1>
 60a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <counter>
				DIO_WritePin(LED3 ,LOW);
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	8f e0       	ldi	r24, 0x0F	; 15
 612:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		for (i=NUM_0 ;i<NUM_20 ;i++)
		{
			/* timer_delay(50); */ 
			while((counter < NUM_50));
			counter = NUM_0 ;
			while(Flag == NUM_1)
 616:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 61a:	81 30       	cpi	r24, 0x01	; 1
 61c:	f1 f2       	breq	.-68     	; 0x5da <main+0xda>
			}
		}
		
		DIO_WritePin(LED1 ,LOW);
		DIO_WritePin(LED3 ,HIGH);
		for (i=NUM_0 ;i<NUM_20 ;i++)
 61e:	89 81       	ldd	r24, Y+1	; 0x01
 620:	8f 5f       	subi	r24, 0xFF	; 255
 622:	89 83       	std	Y+1, r24	; 0x01
 624:	89 81       	ldd	r24, Y+1	; 0x01
 626:	84 31       	cpi	r24, 0x14	; 20
 628:	60 f2       	brcs	.-104    	; 0x5c2 <main+0xc2>
				counter = NUM_0;
				DIO_WritePin(LED3 ,LOW);
				
			}
		}
		DIO_WritePin(LED3 ,LOW);
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	8f e0       	ldi	r24, 0x0F	; 15
 62e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		DIO_WritePin(LED2 ,HIGH);
 632:	61 e0       	ldi	r22, 0x01	; 1
 634:	8e e0       	ldi	r24, 0x0E	; 14
 636:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		for (i=NUM_0 ;i<NUM_20 ;i++)
 63a:	19 82       	std	Y+1, r1	; 0x01
 63c:	31 c0       	rjmp	.+98     	; 0x6a0 <main+0x1a0>
		{
			/* timer_delay(50); */
			while((counter < NUM_50));
 63e:	00 00       	nop
 640:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter>
 644:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <counter+0x1>
 648:	c2 97       	sbiw	r24, 0x32	; 50
 64a:	d0 f3       	brcs	.-12     	; 0x640 <main+0x140>
			counter= NUM_0;
 64c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter+0x1>
 650:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <counter>
			while(Flag == NUM_1)
 654:	1e c0       	rjmp	.+60     	; 0x692 <main+0x192>
			{
				Flag = NUM_0 ;
 656:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
				DIO_WritePin(LED2 ,LOW);
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	8e e0       	ldi	r24, 0x0E	; 14
 65e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
				DIO_WritePin(LED1 ,LOW);
 662:	60 e0       	ldi	r22, 0x00	; 0
 664:	8d e0       	ldi	r24, 0x0D	; 13
 666:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
				DIO_WritePin(LED3 ,HIGH);
 66a:	61 e0       	ldi	r22, 0x01	; 1
 66c:	8f e0       	ldi	r24, 0x0F	; 15
 66e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
				/* timer_delay(1000); */
				while((counter < NUM_1000));
 672:	00 00       	nop
 674:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter>
 678:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <counter+0x1>
 67c:	88 3e       	cpi	r24, 0xE8	; 232
 67e:	93 40       	sbci	r25, 0x03	; 3
 680:	c8 f3       	brcs	.-14     	; 0x674 <main+0x174>
				counter = NUM_0 ;
 682:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter+0x1>
 686:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <counter>
				DIO_WritePin(LED3 ,LOW);
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	8f e0       	ldi	r24, 0x0F	; 15
 68e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		for (i=NUM_0 ;i<NUM_20 ;i++)
		{
			/* timer_delay(50); */
			while((counter < NUM_50));
			counter= NUM_0;
			while(Flag == NUM_1)
 692:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 696:	81 30       	cpi	r24, 0x01	; 1
 698:	f1 f2       	breq	.-68     	; 0x656 <main+0x156>
				
			}
		}
		DIO_WritePin(LED3 ,LOW);
		DIO_WritePin(LED2 ,HIGH);
		for (i=NUM_0 ;i<NUM_20 ;i++)
 69a:	89 81       	ldd	r24, Y+1	; 0x01
 69c:	8f 5f       	subi	r24, 0xFF	; 255
 69e:	89 83       	std	Y+1, r24	; 0x01
 6a0:	89 81       	ldd	r24, Y+1	; 0x01
 6a2:	84 31       	cpi	r24, 0x14	; 20
 6a4:	60 f2       	brcs	.-104    	; 0x63e <main+0x13e>
				counter = NUM_0 ;
				DIO_WritePin(LED3 ,LOW);
				
			}
		}
		DIO_WritePin(LED2 ,LOW);
 6a6:	60 e0       	ldi	r22, 0x00	; 0
 6a8:	8e e0       	ldi	r24, 0x0E	; 14
 6aa:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		
		

	}
 6ae:	45 cf       	rjmp	.-374    	; 0x53a <main+0x3a>

000006b0 <Timer0_CTC_Init>:
	for(i=NUM_0; i< n;i++)
	{
		while ((TIFR & TIFR_flag)== NUM_0);
		Set_Bit(TIFR,BIT_1);
	}
}
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	cd b7       	in	r28, 0x3d	; 61
 6b6:	de b7       	in	r29, 0x3e	; 62
 6b8:	83 e5       	ldi	r24, 0x53	; 83
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	23 e5       	ldi	r18, 0x53	; 83
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	f9 01       	movw	r30, r18
 6c2:	20 81       	ld	r18, Z
 6c4:	2f 77       	andi	r18, 0x7F	; 127
 6c6:	fc 01       	movw	r30, r24
 6c8:	20 83       	st	Z, r18
 6ca:	83 e5       	ldi	r24, 0x53	; 83
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	23 e5       	ldi	r18, 0x53	; 83
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	f9 01       	movw	r30, r18
 6d4:	20 81       	ld	r18, Z
 6d6:	2f 7b       	andi	r18, 0xBF	; 191
 6d8:	fc 01       	movw	r30, r24
 6da:	20 83       	st	Z, r18
 6dc:	83 e5       	ldi	r24, 0x53	; 83
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	23 e5       	ldi	r18, 0x53	; 83
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	f9 01       	movw	r30, r18
 6e6:	20 81       	ld	r18, Z
 6e8:	2f 7d       	andi	r18, 0xDF	; 223
 6ea:	fc 01       	movw	r30, r24
 6ec:	20 83       	st	Z, r18
 6ee:	83 e5       	ldi	r24, 0x53	; 83
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	23 e5       	ldi	r18, 0x53	; 83
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	f9 01       	movw	r30, r18
 6f8:	20 81       	ld	r18, Z
 6fa:	2f 7e       	andi	r18, 0xEF	; 239
 6fc:	fc 01       	movw	r30, r24
 6fe:	20 83       	st	Z, r18
 700:	83 e5       	ldi	r24, 0x53	; 83
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	23 e5       	ldi	r18, 0x53	; 83
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	f9 01       	movw	r30, r18
 70a:	20 81       	ld	r18, Z
 70c:	28 60       	ori	r18, 0x08	; 8
 70e:	fc 01       	movw	r30, r24
 710:	20 83       	st	Z, r18
 712:	83 e5       	ldi	r24, 0x53	; 83
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	23 e5       	ldi	r18, 0x53	; 83
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	f9 01       	movw	r30, r18
 71c:	20 81       	ld	r18, Z
 71e:	2b 7f       	andi	r18, 0xFB	; 251
 720:	fc 01       	movw	r30, r24
 722:	20 83       	st	Z, r18
 724:	83 e5       	ldi	r24, 0x53	; 83
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	23 e5       	ldi	r18, 0x53	; 83
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	f9 01       	movw	r30, r18
 72e:	20 81       	ld	r18, Z
 730:	22 60       	ori	r18, 0x02	; 2
 732:	fc 01       	movw	r30, r24
 734:	20 83       	st	Z, r18
 736:	83 e5       	ldi	r24, 0x53	; 83
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	23 e5       	ldi	r18, 0x53	; 83
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	f9 01       	movw	r30, r18
 740:	20 81       	ld	r18, Z
 742:	21 60       	ori	r18, 0x01	; 1
 744:	fc 01       	movw	r30, r24
 746:	20 83       	st	Z, r18
 748:	8f e5       	ldi	r24, 0x5F	; 95
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	2f e5       	ldi	r18, 0x5F	; 95
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	f9 01       	movw	r30, r18
 752:	20 81       	ld	r18, Z
 754:	20 68       	ori	r18, 0x80	; 128
 756:	fc 01       	movw	r30, r24
 758:	20 83       	st	Z, r18
 75a:	89 e5       	ldi	r24, 0x59	; 89
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	29 e5       	ldi	r18, 0x59	; 89
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	f9 01       	movw	r30, r18
 764:	20 81       	ld	r18, Z
 766:	22 60       	ori	r18, 0x02	; 2
 768:	fc 01       	movw	r30, r24
 76a:	20 83       	st	Z, r18
 76c:	82 e5       	ldi	r24, 0x52	; 82
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	fc 01       	movw	r30, r24
 772:	10 82       	st	Z, r1
 774:	8c e5       	ldi	r24, 0x5C	; 92
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	2c e7       	ldi	r18, 0x7C	; 124
 77a:	fc 01       	movw	r30, r24
 77c:	20 83       	st	Z, r18
 77e:	00 00       	nop
 780:	df 91       	pop	r29
 782:	cf 91       	pop	r28
 784:	08 95       	ret

00000786 <__vector_10>:

/************************************************************************/
/* Interrupt of CTC Mode in Timer0                                      */
/************************************************************************/
ISR(TIMER0_COMP_vect)
{
 786:	1f 92       	push	r1
 788:	0f 92       	push	r0
 78a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 78e:	0f 92       	push	r0
 790:	11 24       	eor	r1, r1
 792:	8f 93       	push	r24
 794:	9f 93       	push	r25
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
	counter++;
 79e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter>
 7a2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <counter+0x1>
 7a6:	01 96       	adiw	r24, 0x01	; 1
 7a8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <counter+0x1>
 7ac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counter>
 7b0:	00 00       	nop
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	9f 91       	pop	r25
 7b8:	8f 91       	pop	r24
 7ba:	0f 90       	pop	r0
 7bc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 7c0:	0f 90       	pop	r0
 7c2:	1f 90       	pop	r1
 7c4:	18 95       	reti

000007c6 <_exit>:
 7c6:	f8 94       	cli

000007c8 <__stop_program>:
 7c8:	ff cf       	rjmp	.-2      	; 0x7c8 <__stop_program>
