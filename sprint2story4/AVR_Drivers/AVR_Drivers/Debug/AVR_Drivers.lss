
AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000009a6  00000a3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  00800078  00800078  00000a52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa7  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4b  00000000  00000000  00001bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b2a  00000000  00000000  0000262a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  00003154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000583  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000766  00000000  00000000  00003af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004259  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 a0 04 	jmp	0x940	; 0x940 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3b       	cpi	r26, 0xBC	; 188
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 01 	call	0x2c0	; 0x2c0 <main>
  8a:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDirection>:
/* @Param: Pin_Num, Pin_Direction                                       */
/* return: void                                                         */
/* FUNCTION Description: Set PINs Direction                             */
/************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_SetPinDirection+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection == OUTPUT)
  a0:	8a 81       	ldd	r24, Y+2	; 0x02
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_SetPinDirection+0x16>
  a6:	74 c0       	rjmp	.+232    	; 0x190 <DIO_SetPinDirection+0xfe>
	{
		if((PinNum >= PIN0) && (PinNum <= PIN7) )
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	88 30       	cpi	r24, 0x08	; 8
  ac:	a8 f4       	brcc	.+42     	; 0xd8 <DIO_SetPinDirection+0x46>
		{
			Set_Bit(DDRA,PinNum);
  ae:	8a e3       	ldi	r24, 0x3A	; 58
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	2a e3       	ldi	r18, 0x3A	; 58
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	20 81       	ld	r18, Z
  ba:	62 2f       	mov	r22, r18
  bc:	29 81       	ldd	r18, Y+1	; 0x01
  be:	42 2f       	mov	r20, r18
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_SetPinDirection+0x3a>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	4a 95       	dec	r20
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_SetPinDirection+0x36>
  d0:	26 2b       	or	r18, r22
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	else
	{
		
	}
	
}
  d6:	d6 c0       	rjmp	.+428    	; 0x284 <DIO_SetPinDirection+0x1f2>
	{
		if((PinNum >= PIN0) && (PinNum <= PIN7) )
		{
			Set_Bit(DDRA,PinNum);
		}
		else if((PinNum >= PIN8) && (PinNum <= PIN15) )
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	88 30       	cpi	r24, 0x08	; 8
  dc:	d8 f0       	brcs	.+54     	; 0x114 <DIO_SetPinDirection+0x82>
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	80 31       	cpi	r24, 0x10	; 16
  e2:	c0 f4       	brcc	.+48     	; 0x114 <DIO_SetPinDirection+0x82>
		{
			Set_Bit(DDRB,(PinNum-PIN8));
  e4:	87 e3       	ldi	r24, 0x37	; 55
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	27 e3       	ldi	r18, 0x37	; 55
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	f9 01       	movw	r30, r18
  ee:	20 81       	ld	r18, Z
  f0:	62 2f       	mov	r22, r18
  f2:	29 81       	ldd	r18, Y+1	; 0x01
  f4:	22 2f       	mov	r18, r18
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	a9 01       	movw	r20, r18
  fa:	48 50       	subi	r20, 0x08	; 8
  fc:	51 09       	sbc	r21, r1
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_SetPinDirection+0x76>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	4a 95       	dec	r20
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_SetPinDirection+0x72>
 10c:	26 2b       	or	r18, r22
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
 112:	b8 c0       	rjmp	.+368    	; 0x284 <DIO_SetPinDirection+0x1f2>
		}
		else if((PinNum >= PIN16) && (PinNum <= PIN23) )
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	80 31       	cpi	r24, 0x10	; 16
 118:	d8 f0       	brcs	.+54     	; 0x150 <DIO_SetPinDirection+0xbe>
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	88 31       	cpi	r24, 0x18	; 24
 11e:	c0 f4       	brcc	.+48     	; 0x150 <DIO_SetPinDirection+0xbe>
		{
			Set_Bit(DDRC,(PinNum-PIN16));
 120:	84 e3       	ldi	r24, 0x34	; 52
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	24 e3       	ldi	r18, 0x34	; 52
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	20 81       	ld	r18, Z
 12c:	62 2f       	mov	r22, r18
 12e:	29 81       	ldd	r18, Y+1	; 0x01
 130:	22 2f       	mov	r18, r18
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	a9 01       	movw	r20, r18
 136:	40 51       	subi	r20, 0x10	; 16
 138:	51 09       	sbc	r21, r1
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_SetPinDirection+0xb2>
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	4a 95       	dec	r20
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_SetPinDirection+0xae>
 148:	26 2b       	or	r18, r22
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
 14e:	9a c0       	rjmp	.+308    	; 0x284 <DIO_SetPinDirection+0x1f2>
		}
		else if((PinNum >= PIN24) && (PinNum <= PIN31) )
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	88 31       	cpi	r24, 0x18	; 24
 154:	08 f4       	brcc	.+2      	; 0x158 <DIO_SetPinDirection+0xc6>
 156:	96 c0       	rjmp	.+300    	; 0x284 <DIO_SetPinDirection+0x1f2>
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	80 32       	cpi	r24, 0x20	; 32
 15c:	08 f0       	brcs	.+2      	; 0x160 <DIO_SetPinDirection+0xce>
 15e:	92 c0       	rjmp	.+292    	; 0x284 <DIO_SetPinDirection+0x1f2>
		{
			Set_Bit(DDRD,(PinNum-PIN24));
 160:	81 e3       	ldi	r24, 0x31	; 49
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	21 e3       	ldi	r18, 0x31	; 49
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	f9 01       	movw	r30, r18
 16a:	20 81       	ld	r18, Z
 16c:	62 2f       	mov	r22, r18
 16e:	29 81       	ldd	r18, Y+1	; 0x01
 170:	22 2f       	mov	r18, r18
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	a9 01       	movw	r20, r18
 176:	48 51       	subi	r20, 0x18	; 24
 178:	51 09       	sbc	r21, r1
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_SetPinDirection+0xf2>
 180:	22 0f       	add	r18, r18
 182:	33 1f       	adc	r19, r19
 184:	4a 95       	dec	r20
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_SetPinDirection+0xee>
 188:	26 2b       	or	r18, r22
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
	else
	{
		
	}
	
}
 18e:	7a c0       	rjmp	.+244    	; 0x284 <DIO_SetPinDirection+0x1f2>
		{
			
		}
	}
	
	else if(PinDirection == INPUT)
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	88 23       	and	r24, r24
 194:	09 f0       	breq	.+2      	; 0x198 <DIO_SetPinDirection+0x106>
 196:	76 c0       	rjmp	.+236    	; 0x284 <DIO_SetPinDirection+0x1f2>
	{
		if((PinNum >= PIN0) && (PinNum <= PIN7) )
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	88 30       	cpi	r24, 0x08	; 8
 19c:	b0 f4       	brcc	.+44     	; 0x1ca <DIO_SetPinDirection+0x138>
		{
			Clear_Bit(DDRA,PinNum);
 19e:	8a e3       	ldi	r24, 0x3A	; 58
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	2a e3       	ldi	r18, 0x3A	; 58
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	f9 01       	movw	r30, r18
 1a8:	20 81       	ld	r18, Z
 1aa:	62 2f       	mov	r22, r18
 1ac:	29 81       	ldd	r18, Y+1	; 0x01
 1ae:	42 2f       	mov	r20, r18
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_SetPinDirection+0x12a>
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	4a 95       	dec	r20
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_SetPinDirection+0x126>
 1c0:	20 95       	com	r18
 1c2:	26 23       	and	r18, r22
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 83       	st	Z, r18
	else
	{
		
	}
	
}
 1c8:	5d c0       	rjmp	.+186    	; 0x284 <DIO_SetPinDirection+0x1f2>
	{
		if((PinNum >= PIN0) && (PinNum <= PIN7) )
		{
			Clear_Bit(DDRA,PinNum);
		}
		else if((PinNum >= PIN8) && (PinNum <= PIN15) )
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	88 30       	cpi	r24, 0x08	; 8
 1ce:	e0 f0       	brcs	.+56     	; 0x208 <DIO_SetPinDirection+0x176>
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	80 31       	cpi	r24, 0x10	; 16
 1d4:	c8 f4       	brcc	.+50     	; 0x208 <DIO_SetPinDirection+0x176>
		{
			Clear_Bit(DDRB,(PinNum-PIN8));
 1d6:	87 e3       	ldi	r24, 0x37	; 55
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	27 e3       	ldi	r18, 0x37	; 55
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	f9 01       	movw	r30, r18
 1e0:	20 81       	ld	r18, Z
 1e2:	62 2f       	mov	r22, r18
 1e4:	29 81       	ldd	r18, Y+1	; 0x01
 1e6:	22 2f       	mov	r18, r18
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	a9 01       	movw	r20, r18
 1ec:	48 50       	subi	r20, 0x08	; 8
 1ee:	51 09       	sbc	r21, r1
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SetPinDirection+0x168>
 1f6:	22 0f       	add	r18, r18
 1f8:	33 1f       	adc	r19, r19
 1fa:	4a 95       	dec	r20
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SetPinDirection+0x164>
 1fe:	20 95       	com	r18
 200:	26 23       	and	r18, r22
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18
 206:	3e c0       	rjmp	.+124    	; 0x284 <DIO_SetPinDirection+0x1f2>
		}
		else if((PinNum >= PIN16) && (PinNum <= PIN23) )
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	80 31       	cpi	r24, 0x10	; 16
 20c:	e0 f0       	brcs	.+56     	; 0x246 <DIO_SetPinDirection+0x1b4>
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	88 31       	cpi	r24, 0x18	; 24
 212:	c8 f4       	brcc	.+50     	; 0x246 <DIO_SetPinDirection+0x1b4>
		{
			Clear_Bit(DDRC,(PinNum-PIN16));
 214:	84 e3       	ldi	r24, 0x34	; 52
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	24 e3       	ldi	r18, 0x34	; 52
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	f9 01       	movw	r30, r18
 21e:	20 81       	ld	r18, Z
 220:	62 2f       	mov	r22, r18
 222:	29 81       	ldd	r18, Y+1	; 0x01
 224:	22 2f       	mov	r18, r18
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	a9 01       	movw	r20, r18
 22a:	40 51       	subi	r20, 0x10	; 16
 22c:	51 09       	sbc	r21, r1
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPinDirection+0x1a6>
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	4a 95       	dec	r20
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPinDirection+0x1a2>
 23c:	20 95       	com	r18
 23e:	26 23       	and	r18, r22
 240:	fc 01       	movw	r30, r24
 242:	20 83       	st	Z, r18
 244:	1f c0       	rjmp	.+62     	; 0x284 <DIO_SetPinDirection+0x1f2>
		}
		else if((PinNum >= PIN24) && (PinNum <= PIN31) )
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	88 31       	cpi	r24, 0x18	; 24
 24a:	e0 f0       	brcs	.+56     	; 0x284 <DIO_SetPinDirection+0x1f2>
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	80 32       	cpi	r24, 0x20	; 32
 250:	c8 f4       	brcc	.+50     	; 0x284 <DIO_SetPinDirection+0x1f2>
		{
			Clear_Bit(DDRD,(PinNum-PIN24));
 252:	81 e3       	ldi	r24, 0x31	; 49
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	21 e3       	ldi	r18, 0x31	; 49
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	f9 01       	movw	r30, r18
 25c:	20 81       	ld	r18, Z
 25e:	62 2f       	mov	r22, r18
 260:	29 81       	ldd	r18, Y+1	; 0x01
 262:	22 2f       	mov	r18, r18
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	a9 01       	movw	r20, r18
 268:	48 51       	subi	r20, 0x18	; 24
 26a:	51 09       	sbc	r21, r1
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_SetPinDirection+0x1e4>
 272:	22 0f       	add	r18, r18
 274:	33 1f       	adc	r19, r19
 276:	4a 95       	dec	r20
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_SetPinDirection+0x1e0>
 27a:	20 95       	com	r18
 27c:	26 23       	and	r18, r22
 27e:	fc 01       	movw	r30, r24
 280:	20 83       	st	Z, r18
	else
	{
		
	}
	
}
 282:	00 c0       	rjmp	.+0      	; 0x284 <DIO_SetPinDirection+0x1f2>
 284:	00 00       	nop
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <__vector_3>:

/************************************************************************/
/* External interrupt no. 2                                             */
/************************************************************************/
ISR(INT2_vect)
{
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	8f 93       	push	r24
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
	Flag = NUM_1 ;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 2ac:	00 00       	nop
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	8f 91       	pop	r24
 2b4:	0f 90       	pop	r0
 2b6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <main>:
#include "LCD.h"

#include "Schedular_Preemptive.h"

int main(void)
{
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
 2c8:	68 97       	sbiw	r28, 0x18	; 24
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	f8 94       	cli
 2ce:	de bf       	out	0x3e, r29	; 62
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	cd bf       	out	0x3d, r28	; 61
	/* Replace with your application code */
	
	Task_Init();
 2d4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Task_Init>
	scheduler_Add_Task(Task2);
	scheduler_Add_Task(Task3); 
#endif
	
	
	SchedulerStruct Task_1 = {Task1, NUM_3000, NUM_3000, 3};
 2d8:	28 e0       	ldi	r18, 0x08	; 8
 2da:	e0 e6       	ldi	r30, 0x60	; 96
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	ce 01       	movw	r24, r28
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	dc 01       	movw	r26, r24
 2e4:	01 90       	ld	r0, Z+
 2e6:	0d 92       	st	X+, r0
 2e8:	2a 95       	dec	r18
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x24>
	SchedulerStruct Task_2 = {Task2, NUM_2000, NUM_2000, 2};
 2ec:	88 e0       	ldi	r24, 0x08	; 8
 2ee:	e8 e6       	ldi	r30, 0x68	; 104
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	de 01       	movw	r26, r28
 2f4:	19 96       	adiw	r26, 0x09	; 9
 2f6:	01 90       	ld	r0, Z+
 2f8:	0d 92       	st	X+, r0
 2fa:	8a 95       	dec	r24
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0x36>
	SchedulerStruct Task_3 = {Task3, NUM_1000, NUM_1000, 1};
 2fe:	88 e0       	ldi	r24, 0x08	; 8
 300:	e0 e7       	ldi	r30, 0x70	; 112
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	de 01       	movw	r26, r28
 306:	51 96       	adiw	r26, 0x11	; 17
 308:	01 90       	ld	r0, Z+
 30a:	0d 92       	st	X+, r0
 30c:	8a 95       	dec	r24
 30e:	e1 f7       	brne	.-8      	; 0x308 <main+0x48>
	schedulerInit();
 310:	0e 94 cc 03 	call	0x798	; 0x798 <schedulerInit>
	
	SchedulerStruct_Add_Task(Task_1);
 314:	29 81       	ldd	r18, Y+1	; 0x01
 316:	3a 81       	ldd	r19, Y+2	; 0x02
 318:	4b 81       	ldd	r20, Y+3	; 0x03
 31a:	5c 81       	ldd	r21, Y+4	; 0x04
 31c:	6d 81       	ldd	r22, Y+5	; 0x05
 31e:	7e 81       	ldd	r23, Y+6	; 0x06
 320:	8f 81       	ldd	r24, Y+7	; 0x07
 322:	98 85       	ldd	r25, Y+8	; 0x08
 324:	0e 94 b5 01 	call	0x36a	; 0x36a <SchedulerStruct_Add_Task>
	SchedulerStruct_Add_Task(Task_2);
 328:	29 85       	ldd	r18, Y+9	; 0x09
 32a:	3a 85       	ldd	r19, Y+10	; 0x0a
 32c:	4b 85       	ldd	r20, Y+11	; 0x0b
 32e:	5c 85       	ldd	r21, Y+12	; 0x0c
 330:	6d 85       	ldd	r22, Y+13	; 0x0d
 332:	7e 85       	ldd	r23, Y+14	; 0x0e
 334:	8f 85       	ldd	r24, Y+15	; 0x0f
 336:	98 89       	ldd	r25, Y+16	; 0x10
 338:	0e 94 b5 01 	call	0x36a	; 0x36a <SchedulerStruct_Add_Task>
	SchedulerStruct_Add_Task(Task_3);
 33c:	29 89       	ldd	r18, Y+17	; 0x11
 33e:	3a 89       	ldd	r19, Y+18	; 0x12
 340:	4b 89       	ldd	r20, Y+19	; 0x13
 342:	5c 89       	ldd	r21, Y+20	; 0x14
 344:	6d 89       	ldd	r22, Y+21	; 0x15
 346:	7e 89       	ldd	r23, Y+22	; 0x16
 348:	8f 89       	ldd	r24, Y+23	; 0x17
 34a:	98 8d       	ldd	r25, Y+24	; 0x18
 34c:	0e 94 b5 01 	call	0x36a	; 0x36a <SchedulerStruct_Add_Task>
	
	schedulerStart();
 350:	0e 94 b9 03 	call	0x772	; 0x772 <schedulerStart>

	return NUM_0 ;
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
}
 358:	68 96       	adiw	r28, 0x18	; 24
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <SchedulerStruct_Add_Task>:
			/* call func. of execution the array of tasks  */
			Preescheduler();
			/* clear the flag */
			flag = NUM_0 ;
		}
	}
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
 372:	60 97       	sbiw	r28, 0x10	; 16
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	f8 94       	cli
 378:	de bf       	out	0x3e, r29	; 62
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	cd bf       	out	0x3d, r28	; 61
 37e:	29 87       	std	Y+9, r18	; 0x09
 380:	3a 87       	std	Y+10, r19	; 0x0a
 382:	4b 87       	std	Y+11, r20	; 0x0b
 384:	5c 87       	std	Y+12, r21	; 0x0c
 386:	6d 87       	std	Y+13, r22	; 0x0d
 388:	7e 87       	std	Y+14, r23	; 0x0e
 38a:	8f 87       	std	Y+15, r24	; 0x0f
 38c:	98 8b       	std	Y+16, r25	; 0x10
 38e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ArrayIndex>
 392:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <ArrayIndex+0x1>
 396:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <ArrayIndex+0x2>
 39a:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <ArrayIndex+0x3>
 39e:	05 97       	sbiw	r24, 0x05	; 5
 3a0:	a1 05       	cpc	r26, r1
 3a2:	b1 05       	cpc	r27, r1
 3a4:	08 f0       	brcs	.+2      	; 0x3a8 <SchedulerStruct_Add_Task+0x3e>
 3a6:	56 c0       	rjmp	.+172    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 3a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ArrayIndex>
 3ac:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <ArrayIndex+0x1>
 3b0:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <ArrayIndex+0x2>
 3b4:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <ArrayIndex+0x3>
 3b8:	89 2b       	or	r24, r25
 3ba:	8a 2b       	or	r24, r26
 3bc:	8b 2b       	or	r24, r27
 3be:	e9 f4       	brne	.+58     	; 0x3fa <SchedulerStruct_Add_Task+0x90>
 3c0:	88 e0       	ldi	r24, 0x08	; 8
 3c2:	fe 01       	movw	r30, r28
 3c4:	39 96       	adiw	r30, 0x09	; 9
 3c6:	a2 e8       	ldi	r26, 0x82	; 130
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	01 90       	ld	r0, Z+
 3cc:	0d 92       	st	X+, r0
 3ce:	8a 95       	dec	r24
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <SchedulerStruct_Add_Task+0x60>
 3d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ArrayIndex>
 3d6:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <ArrayIndex+0x1>
 3da:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <ArrayIndex+0x2>
 3de:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <ArrayIndex+0x3>
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	a1 1d       	adc	r26, r1
 3e6:	b1 1d       	adc	r27, r1
 3e8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <ArrayIndex>
 3ec:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <ArrayIndex+0x1>
 3f0:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <ArrayIndex+0x2>
 3f4:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <ArrayIndex+0x3>
 3f8:	2b c0       	rjmp	.+86     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 3fa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ArrayIndex>
 3fe:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <ArrayIndex+0x1>
 402:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <ArrayIndex+0x2>
 406:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <ArrayIndex+0x3>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	8e 57       	subi	r24, 0x7E	; 126
 418:	9f 4f       	sbci	r25, 0xFF	; 255
 41a:	28 e0       	ldi	r18, 0x08	; 8
 41c:	fe 01       	movw	r30, r28
 41e:	39 96       	adiw	r30, 0x09	; 9
 420:	dc 01       	movw	r26, r24
 422:	01 90       	ld	r0, Z+
 424:	0d 92       	st	X+, r0
 426:	2a 95       	dec	r18
 428:	e1 f7       	brne	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 42a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ArrayIndex>
 42e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <ArrayIndex+0x1>
 432:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <ArrayIndex+0x2>
 436:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <ArrayIndex+0x3>
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	a1 1d       	adc	r26, r1
 43e:	b1 1d       	adc	r27, r1
 440:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <ArrayIndex>
 444:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <ArrayIndex+0x1>
 448:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <ArrayIndex+0x2>
 44c:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <ArrayIndex+0x3>
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	01 c0       	rjmp	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	60 96       	adiw	r28, 0x10	; 16
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	f8 94       	cli
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	0f be       	out	0x3f, r0	; 63
 460:	cd bf       	out	0x3d, r28	; 61
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <scheduler_Remove_Task>:
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	00 d0       	rcall	.+0      	; 0x46e <scheduler_Remove_Task+0x6>
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	9a 83       	std	Y+2, r25	; 0x02
 474:	89 83       	std	Y+1, r24	; 0x01
 476:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <indexa>
 47a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <indexa+0x1>
 47e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <indexa+0x2>
 482:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <indexa+0x3>
 486:	a3 c0       	rjmp	.+326    	; 0x5ce <scheduler_Remove_Task+0x166>
 488:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <indexa>
 48c:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <indexa+0x1>
 490:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <indexa+0x2>
 494:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <indexa+0x3>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	8e 57       	subi	r24, 0x7E	; 126
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	fc 01       	movw	r30, r24
 4aa:	20 81       	ld	r18, Z
 4ac:	31 81       	ldd	r19, Z+1	; 0x01
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	9a 81       	ldd	r25, Y+2	; 0x02
 4b2:	28 17       	cp	r18, r24
 4b4:	39 07       	cpc	r19, r25
 4b6:	09 f0       	breq	.+2      	; 0x4ba <scheduler_Remove_Task+0x52>
 4b8:	77 c0       	rjmp	.+238    	; 0x5a8 <scheduler_Remove_Task+0x140>
 4ba:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <indexa>
 4be:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <indexa+0x1>
 4c2:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <indexa+0x2>
 4c6:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <indexa+0x3>
 4ca:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <j>
 4ce:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <j+0x1>
 4d2:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <j+0x2>
 4d6:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <j+0x3>
 4da:	3d c0       	rjmp	.+122    	; 0x556 <scheduler_Remove_Task+0xee>
 4dc:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <j>
 4e0:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <j+0x1>
 4e4:	40 91 ac 00 	lds	r20, 0x00AC	; 0x8000ac <j+0x2>
 4e8:	50 91 ad 00 	lds	r21, 0x00AD	; 0x8000ad <j+0x3>
 4ec:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <j>
 4f0:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <j+0x1>
 4f4:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <j+0x2>
 4f8:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <j+0x3>
 4fc:	01 96       	adiw	r24, 0x01	; 1
 4fe:	a1 1d       	adc	r26, r1
 500:	b1 1d       	adc	r27, r1
 502:	22 0f       	add	r18, r18
 504:	33 1f       	adc	r19, r19
 506:	22 0f       	add	r18, r18
 508:	33 1f       	adc	r19, r19
 50a:	22 0f       	add	r18, r18
 50c:	33 1f       	adc	r19, r19
 50e:	2e 57       	subi	r18, 0x7E	; 126
 510:	3f 4f       	sbci	r19, 0xFF	; 255
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	8e 57       	subi	r24, 0x7E	; 126
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	48 e0       	ldi	r20, 0x08	; 8
 524:	fc 01       	movw	r30, r24
 526:	d9 01       	movw	r26, r18
 528:	01 90       	ld	r0, Z+
 52a:	0d 92       	st	X+, r0
 52c:	4a 95       	dec	r20
 52e:	e1 f7       	brne	.-8      	; 0x528 <scheduler_Remove_Task+0xc0>
 530:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <j>
 534:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <j+0x1>
 538:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <j+0x2>
 53c:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <j+0x3>
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	a1 1d       	adc	r26, r1
 544:	b1 1d       	adc	r27, r1
 546:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <j>
 54a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <j+0x1>
 54e:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <j+0x2>
 552:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <j+0x3>
 556:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <j>
 55a:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <j+0x1>
 55e:	40 91 ac 00 	lds	r20, 0x00AC	; 0x8000ac <j+0x2>
 562:	50 91 ad 00 	lds	r21, 0x00AD	; 0x8000ad <j+0x3>
 566:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ArrayIndex>
 56a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <ArrayIndex+0x1>
 56e:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <ArrayIndex+0x2>
 572:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <ArrayIndex+0x3>
 576:	28 17       	cp	r18, r24
 578:	39 07       	cpc	r19, r25
 57a:	4a 07       	cpc	r20, r26
 57c:	5b 07       	cpc	r21, r27
 57e:	08 f4       	brcc	.+2      	; 0x582 <scheduler_Remove_Task+0x11a>
 580:	ad cf       	rjmp	.-166    	; 0x4dc <scheduler_Remove_Task+0x74>
 582:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ArrayIndex>
 586:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <ArrayIndex+0x1>
 58a:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <ArrayIndex+0x2>
 58e:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <ArrayIndex+0x3>
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	a1 09       	sbc	r26, r1
 596:	b1 09       	sbc	r27, r1
 598:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <ArrayIndex>
 59c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <ArrayIndex+0x1>
 5a0:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <ArrayIndex+0x2>
 5a4:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <ArrayIndex+0x3>
 5a8:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <indexa>
 5ac:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <indexa+0x1>
 5b0:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <indexa+0x2>
 5b4:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <indexa+0x3>
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	a1 1d       	adc	r26, r1
 5bc:	b1 1d       	adc	r27, r1
 5be:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <indexa>
 5c2:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <indexa+0x1>
 5c6:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <indexa+0x2>
 5ca:	b0 93 81 00 	sts	0x0081, r27	; 0x800081 <indexa+0x3>
 5ce:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <indexa>
 5d2:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <indexa+0x1>
 5d6:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <indexa+0x2>
 5da:	50 91 81 00 	lds	r21, 0x0081	; 0x800081 <indexa+0x3>
 5de:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ArrayIndex>
 5e2:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <ArrayIndex+0x1>
 5e6:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <ArrayIndex+0x2>
 5ea:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <ArrayIndex+0x3>
 5ee:	28 17       	cp	r18, r24
 5f0:	39 07       	cpc	r19, r25
 5f2:	4a 07       	cpc	r20, r26
 5f4:	5b 07       	cpc	r21, r27
 5f6:	08 f4       	brcc	.+2      	; 0x5fa <scheduler_Remove_Task+0x192>
 5f8:	47 cf       	rjmp	.-370    	; 0x488 <scheduler_Remove_Task+0x20>
 5fa:	00 00       	nop
 5fc:	0f 90       	pop	r0
 5fe:	0f 90       	pop	r0
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	08 95       	ret

00000606 <Pree_Set_Flag>:
/* @Param: void                                                         */
/* return: void                                                         */
/* FUNCTION Description: Set_Flag when interrupt occurs                 */
/************************************************************************/
void Pree_Set_Flag(void)
{
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
	/* Set_Flag when interrupt occurs */
	flag = NUM_1;
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <flag>
}
 614:	00 00       	nop
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <Preescheduler>:
/* @Param: takes a prefilled array of structs to void/void functions                */
/* return: void                                                                     */
/* FUNCTION Description: execute the array of tasks                                 */
/************************************************************************************/
void Preescheduler(void )
{
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
	
			for(indexa=NUM_0; indexa < ArrayIndex; indexa++)
 624:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <indexa>
 628:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <indexa+0x1>
 62c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <indexa+0x2>
 630:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <indexa+0x3>
 634:	84 c0       	rjmp	.+264    	; 0x73e <Preescheduler+0x122>
			{
				/* decrement the remaining ticks of task */
				(StructArray[indexa].Remaining_Ticks)-- ;
 636:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <indexa>
 63a:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <indexa+0x1>
 63e:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <indexa+0x2>
 642:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <indexa+0x3>
 646:	9c 01       	movw	r18, r24
 648:	22 0f       	add	r18, r18
 64a:	33 1f       	adc	r19, r19
 64c:	22 0f       	add	r18, r18
 64e:	33 1f       	adc	r19, r19
 650:	22 0f       	add	r18, r18
 652:	33 1f       	adc	r19, r19
 654:	2a 57       	subi	r18, 0x7A	; 122
 656:	3f 4f       	sbci	r19, 0xFF	; 255
 658:	f9 01       	movw	r30, r18
 65a:	20 81       	ld	r18, Z
 65c:	31 81       	ldd	r19, Z+1	; 0x01
 65e:	21 50       	subi	r18, 0x01	; 1
 660:	31 09       	sbc	r19, r1
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	8a 57       	subi	r24, 0x7A	; 122
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	fc 01       	movw	r30, r24
 674:	31 83       	std	Z+1, r19	; 0x01
 676:	20 83       	st	Z, r18
				
				if (( NUM_0 == (StructArray[indexa].Remaining_Ticks) ) )
 678:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <indexa>
 67c:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <indexa+0x1>
 680:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <indexa+0x2>
 684:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <indexa+0x3>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	8a 57       	subi	r24, 0x7A	; 122
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	fc 01       	movw	r30, r24
 69a:	80 81       	ld	r24, Z
 69c:	91 81       	ldd	r25, Z+1	; 0x01
 69e:	89 2b       	or	r24, r25
 6a0:	d9 f5       	brne	.+118    	; 0x718 <Preescheduler+0xfc>
				{
			
					/* implement the task */
					StructArray[indexa].Func_Ptr() ;
 6a2:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <indexa>
 6a6:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <indexa+0x1>
 6aa:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <indexa+0x2>
 6ae:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <indexa+0x3>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	8e 57       	subi	r24, 0x7E	; 126
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	fc 01       	movw	r30, r24
 6c4:	80 81       	ld	r24, Z
 6c6:	91 81       	ldd	r25, Z+1	; 0x01
 6c8:	fc 01       	movw	r30, r24
 6ca:	09 95       	icall
					
					StructArray[indexa].Remaining_Ticks = StructArray[indexa].periodicity ;
 6cc:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <indexa>
 6d0:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <indexa+0x1>
 6d4:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <indexa+0x2>
 6d8:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <indexa+0x3>
 6dc:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <indexa>
 6e0:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <indexa+0x1>
 6e4:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <indexa+0x2>
 6e8:	50 91 81 00 	lds	r21, 0x0081	; 0x800081 <indexa+0x3>
 6ec:	22 0f       	add	r18, r18
 6ee:	33 1f       	adc	r19, r19
 6f0:	22 0f       	add	r18, r18
 6f2:	33 1f       	adc	r19, r19
 6f4:	22 0f       	add	r18, r18
 6f6:	33 1f       	adc	r19, r19
 6f8:	2c 57       	subi	r18, 0x7C	; 124
 6fa:	3f 4f       	sbci	r19, 0xFF	; 255
 6fc:	f9 01       	movw	r30, r18
 6fe:	20 81       	ld	r18, Z
 700:	31 81       	ldd	r19, Z+1	; 0x01
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	8a 57       	subi	r24, 0x7A	; 122
 710:	9f 4f       	sbci	r25, 0xFF	; 255
 712:	fc 01       	movw	r30, r24
 714:	31 83       	std	Z+1, r19	; 0x01
 716:	20 83       	st	Z, r18
/* FUNCTION Description: execute the array of tasks                                 */
/************************************************************************************/
void Preescheduler(void )
{
	
			for(indexa=NUM_0; indexa < ArrayIndex; indexa++)
 718:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <indexa>
 71c:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <indexa+0x1>
 720:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <indexa+0x2>
 724:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <indexa+0x3>
 728:	01 96       	adiw	r24, 0x01	; 1
 72a:	a1 1d       	adc	r26, r1
 72c:	b1 1d       	adc	r27, r1
 72e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <indexa>
 732:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <indexa+0x1>
 736:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <indexa+0x2>
 73a:	b0 93 81 00 	sts	0x0081, r27	; 0x800081 <indexa+0x3>
 73e:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <indexa>
 742:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <indexa+0x1>
 746:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <indexa+0x2>
 74a:	50 91 81 00 	lds	r21, 0x0081	; 0x800081 <indexa+0x3>
 74e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ArrayIndex>
 752:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <ArrayIndex+0x1>
 756:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <ArrayIndex+0x2>
 75a:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <ArrayIndex+0x3>
 75e:	28 17       	cp	r18, r24
 760:	39 07       	cpc	r19, r25
 762:	4a 07       	cpc	r20, r26
 764:	5b 07       	cpc	r21, r27
 766:	08 f4       	brcc	.+2      	; 0x76a <Preescheduler+0x14e>
 768:	66 cf       	rjmp	.-308    	; 0x636 <Preescheduler+0x1a>
					StructArray[indexa].Remaining_Ticks = StructArray[indexa].periodicity ;

				}
			}

}
 76a:	00 00       	nop
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	08 95       	ret

00000772 <schedulerStart>:
/* @Param: void                                                         */
/* return: void                                                         */
/* FUNCTION Description: Start scheduler                                */
/************************************************************************/
void schedulerStart (void)
{
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
	/* Initialization of Timer0  */
	Timer0_CTC_Init();
 77a:	0e 94 22 04 	call	0x844	; 0x844 <Timer0_CTC_Init>
	
	
	while(NUM_1)
	{
		/* Check if Flag raise when interrupt occurs */
		if (NUM_1 == flag)
 77e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <flag>
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	e1 f7       	brne	.-8      	; 0x77e <schedulerStart+0xc>
		{
			/* call func. of execution the array of tasks  */
			Preescheduler();
 786:	0e 94 0e 03 	call	0x61c	; 0x61c <Preescheduler>
			/* call func. to remove certain task  */
			scheduler_Remove_Task(Task2);
 78a:	8e ef       	ldi	r24, 0xFE	; 254
 78c:	93 e0       	ldi	r25, 0x03	; 3
 78e:	0e 94 34 02 	call	0x468	; 0x468 <scheduler_Remove_Task>

			/* clear the flag */
			flag = NUM_0 ;
 792:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <flag>
		}
	}
 796:	f3 cf       	rjmp	.-26     	; 0x77e <schedulerStart+0xc>

00000798 <schedulerInit>:
/* @Param: void                                                         */
/* return: void                                                         */
/* FUNCTION Description: Initialization of scheduler                    */
/************************************************************************/
void schedulerInit (void)
{
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62

	/* call Pree_Set_Flag func. that sets the flag  */
	Set_Call_Back(Pree_Set_Flag);
 7a0:	83 e0       	ldi	r24, 0x03	; 3
 7a2:	93 e0       	ldi	r25, 0x03	; 3
 7a4:	0e 94 8d 04 	call	0x91a	; 0x91a <Set_Call_Back>
	
}
 7a8:	00 00       	nop
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	08 95       	ret

000007b0 <Task_Init>:
task_type Array[] = { Task1 , Task2 , Task3};
 extern uint8 volatile flag  ;
#endif

void Task_Init(void)
{
 7b0:	cf 93       	push	r28
 7b2:	df 93       	push	r29
 7b4:	cd b7       	in	r28, 0x3d	; 61
 7b6:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(LED1 ,OUTPUT);
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	8d e0       	ldi	r24, 0x0D	; 13
 7bc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(LED2 ,OUTPUT);
 7c0:	61 e0       	ldi	r22, 0x01	; 1
 7c2:	8e e0       	ldi	r24, 0x0E	; 14
 7c4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(LED3 ,OUTPUT);
 7c8:	61 e0       	ldi	r22, 0x01	; 1
 7ca:	8f e0       	ldi	r24, 0x0F	; 15
 7cc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
}
 7d0:	00 00       	nop
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	08 95       	ret

000007d8 <Task1>:

void Task1(void)
{
 7d8:	cf 93       	push	r28
 7da:	df 93       	push	r29
 7dc:	cd b7       	in	r28, 0x3d	; 61
 7de:	de b7       	in	r29, 0x3e	; 62

	#if 0
	DIO_WritePin(LED3 ,LOW);
	DIO_WritePin(LED1 ,HIGH);
	#endif
	Toggle_Bit(PORTB, BIT_5);
 7e0:	88 e3       	ldi	r24, 0x38	; 56
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	28 e3       	ldi	r18, 0x38	; 56
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	f9 01       	movw	r30, r18
 7ea:	30 81       	ld	r19, Z
 7ec:	20 e2       	ldi	r18, 0x20	; 32
 7ee:	23 27       	eor	r18, r19
 7f0:	fc 01       	movw	r30, r24
 7f2:	20 83       	st	Z, r18

	
}
 7f4:	00 00       	nop
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	08 95       	ret

000007fc <Task2>:
void Task2(void)
{
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
 800:	cd b7       	in	r28, 0x3d	; 61
 802:	de b7       	in	r29, 0x3e	; 62
	
	#if 0
	DIO_WritePin(LED1 ,LOW);
	DIO_WritePin(LED2 ,HIGH);
	#endif
	Toggle_Bit(PORTB, BIT_6);
 804:	88 e3       	ldi	r24, 0x38	; 56
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	28 e3       	ldi	r18, 0x38	; 56
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	f9 01       	movw	r30, r18
 80e:	30 81       	ld	r19, Z
 810:	20 e4       	ldi	r18, 0x40	; 64
 812:	23 27       	eor	r18, r19
 814:	fc 01       	movw	r30, r24
 816:	20 83       	st	Z, r18


}
 818:	00 00       	nop
 81a:	df 91       	pop	r29
 81c:	cf 91       	pop	r28
 81e:	08 95       	ret

00000820 <Task3>:
void Task3(void)
{
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
	#if 0
	DIO_WritePin(LED1 ,LOW);
	DIO_WritePin(LED2 ,LOW);
	DIO_WritePin(LED3 ,HIGH);
	#endif
	Toggle_Bit(PORTB, BIT_7);
 828:	88 e3       	ldi	r24, 0x38	; 56
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	28 e3       	ldi	r18, 0x38	; 56
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	f9 01       	movw	r30, r18
 832:	30 81       	ld	r19, Z
 834:	20 e8       	ldi	r18, 0x80	; 128
 836:	23 27       	eor	r18, r19
 838:	fc 01       	movw	r30, r24
 83a:	20 83       	st	Z, r18

}
 83c:	00 00       	nop
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	08 95       	ret

00000844 <Timer0_CTC_Init>:
	for(i=NUM_0; i< n;i++)
	{
		while ((TIFR & TIFR_flag)== NUM_0);
		Set_Bit(TIFR,BIT_1);
	}
}
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	cd b7       	in	r28, 0x3d	; 61
 84a:	de b7       	in	r29, 0x3e	; 62
 84c:	83 e5       	ldi	r24, 0x53	; 83
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	23 e5       	ldi	r18, 0x53	; 83
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	f9 01       	movw	r30, r18
 856:	20 81       	ld	r18, Z
 858:	2f 77       	andi	r18, 0x7F	; 127
 85a:	fc 01       	movw	r30, r24
 85c:	20 83       	st	Z, r18
 85e:	83 e5       	ldi	r24, 0x53	; 83
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	23 e5       	ldi	r18, 0x53	; 83
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	f9 01       	movw	r30, r18
 868:	20 81       	ld	r18, Z
 86a:	2f 7b       	andi	r18, 0xBF	; 191
 86c:	fc 01       	movw	r30, r24
 86e:	20 83       	st	Z, r18
 870:	83 e5       	ldi	r24, 0x53	; 83
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	23 e5       	ldi	r18, 0x53	; 83
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	f9 01       	movw	r30, r18
 87a:	20 81       	ld	r18, Z
 87c:	2f 7d       	andi	r18, 0xDF	; 223
 87e:	fc 01       	movw	r30, r24
 880:	20 83       	st	Z, r18
 882:	83 e5       	ldi	r24, 0x53	; 83
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	23 e5       	ldi	r18, 0x53	; 83
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	f9 01       	movw	r30, r18
 88c:	20 81       	ld	r18, Z
 88e:	2f 7e       	andi	r18, 0xEF	; 239
 890:	fc 01       	movw	r30, r24
 892:	20 83       	st	Z, r18
 894:	83 e5       	ldi	r24, 0x53	; 83
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	23 e5       	ldi	r18, 0x53	; 83
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	f9 01       	movw	r30, r18
 89e:	20 81       	ld	r18, Z
 8a0:	28 60       	ori	r18, 0x08	; 8
 8a2:	fc 01       	movw	r30, r24
 8a4:	20 83       	st	Z, r18
 8a6:	83 e5       	ldi	r24, 0x53	; 83
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	23 e5       	ldi	r18, 0x53	; 83
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	f9 01       	movw	r30, r18
 8b0:	20 81       	ld	r18, Z
 8b2:	2b 7f       	andi	r18, 0xFB	; 251
 8b4:	fc 01       	movw	r30, r24
 8b6:	20 83       	st	Z, r18
 8b8:	83 e5       	ldi	r24, 0x53	; 83
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	23 e5       	ldi	r18, 0x53	; 83
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	f9 01       	movw	r30, r18
 8c2:	20 81       	ld	r18, Z
 8c4:	22 60       	ori	r18, 0x02	; 2
 8c6:	fc 01       	movw	r30, r24
 8c8:	20 83       	st	Z, r18
 8ca:	83 e5       	ldi	r24, 0x53	; 83
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	23 e5       	ldi	r18, 0x53	; 83
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	f9 01       	movw	r30, r18
 8d4:	20 81       	ld	r18, Z
 8d6:	21 60       	ori	r18, 0x01	; 1
 8d8:	fc 01       	movw	r30, r24
 8da:	20 83       	st	Z, r18
 8dc:	8f e5       	ldi	r24, 0x5F	; 95
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	2f e5       	ldi	r18, 0x5F	; 95
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	f9 01       	movw	r30, r18
 8e6:	20 81       	ld	r18, Z
 8e8:	20 68       	ori	r18, 0x80	; 128
 8ea:	fc 01       	movw	r30, r24
 8ec:	20 83       	st	Z, r18
 8ee:	89 e5       	ldi	r24, 0x59	; 89
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	29 e5       	ldi	r18, 0x59	; 89
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	f9 01       	movw	r30, r18
 8f8:	20 81       	ld	r18, Z
 8fa:	22 60       	ori	r18, 0x02	; 2
 8fc:	fc 01       	movw	r30, r24
 8fe:	20 83       	st	Z, r18
 900:	82 e5       	ldi	r24, 0x52	; 82
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	fc 01       	movw	r30, r24
 906:	10 82       	st	Z, r1
 908:	8c e5       	ldi	r24, 0x5C	; 92
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	2c e7       	ldi	r18, 0x7C	; 124
 90e:	fc 01       	movw	r30, r24
 910:	20 83       	st	Z, r18
 912:	00 00       	nop
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	08 95       	ret

0000091a <Set_Call_Back>:

void Set_Call_Back(void (*ptr)(void))
{
 91a:	cf 93       	push	r28
 91c:	df 93       	push	r29
 91e:	00 d0       	rcall	.+0      	; 0x920 <Set_Call_Back+0x6>
 920:	cd b7       	in	r28, 0x3d	; 61
 922:	de b7       	in	r29, 0x3e	; 62
 924:	9a 83       	std	Y+2, r25	; 0x02
 926:	89 83       	std	Y+1, r24	; 0x01
	ptr_func = ptr;
 928:	89 81       	ldd	r24, Y+1	; 0x01
 92a:	9a 81       	ldd	r25, Y+2	; 0x02
 92c:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <ptr_func+0x1>
 930:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <ptr_func>
}
 934:	00 00       	nop
 936:	0f 90       	pop	r0
 938:	0f 90       	pop	r0
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	08 95       	ret

00000940 <__vector_10>:

/************************************************************************/
/* Interrupt of CTC Mode in Timer0                                      */
/************************************************************************/
ISR(TIMER0_COMP_vect)
{
 940:	1f 92       	push	r1
 942:	0f 92       	push	r0
 944:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 948:	0f 92       	push	r0
 94a:	11 24       	eor	r1, r1
 94c:	2f 93       	push	r18
 94e:	3f 93       	push	r19
 950:	4f 93       	push	r20
 952:	5f 93       	push	r21
 954:	6f 93       	push	r22
 956:	7f 93       	push	r23
 958:	8f 93       	push	r24
 95a:	9f 93       	push	r25
 95c:	af 93       	push	r26
 95e:	bf 93       	push	r27
 960:	ef 93       	push	r30
 962:	ff 93       	push	r31
 964:	cf 93       	push	r28
 966:	df 93       	push	r29
 968:	cd b7       	in	r28, 0x3d	; 61
 96a:	de b7       	in	r29, 0x3e	; 62
	/* counter++ ; */
	ptr_func();
 96c:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <ptr_func>
 970:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <ptr_func+0x1>
 974:	fc 01       	movw	r30, r24
 976:	09 95       	icall
	
 978:	00 00       	nop
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	ff 91       	pop	r31
 980:	ef 91       	pop	r30
 982:	bf 91       	pop	r27
 984:	af 91       	pop	r26
 986:	9f 91       	pop	r25
 988:	8f 91       	pop	r24
 98a:	7f 91       	pop	r23
 98c:	6f 91       	pop	r22
 98e:	5f 91       	pop	r21
 990:	4f 91       	pop	r20
 992:	3f 91       	pop	r19
 994:	2f 91       	pop	r18
 996:	0f 90       	pop	r0
 998:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 99c:	0f 90       	pop	r0
 99e:	1f 90       	pop	r1
 9a0:	18 95       	reti

000009a2 <_exit>:
 9a2:	f8 94       	cli

000009a4 <__stop_program>:
 9a4:	ff cf       	rjmp	.-2      	; 0x9a4 <__stop_program>
